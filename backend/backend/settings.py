"""
Flash Sku Backend - Django Settings Configuration
Django 项目的核心配置文件，包含数据库、缓存、安全等所有配置

Generated by 'django-admin startproject' using Django 4.2.7.
Customized for Flash Sku high-concurrency seckill system.
"""

import os
import sys
from pathlib import Path

# 尝试导入 environ，如果没有安装则使用默认配置
try:
    import environ
    env = environ.Env(
        DEBUG=(bool, False),
        ALLOWED_HOSTS=(list, []),
        CORS_ALLOWED_ORIGINS=(list, []),
    )
    # 读取环境变量文件
    environ.Env.read_env(os.path.join(Path(__file__).resolve().parent.parent.parent, '.env'))
    USE_ENVIRON = True
except ImportError:
    USE_ENVIRON = False

# 也检查环境变量中的USE_ENVIRON设置
if os.environ.get('USE_ENVIRON', '').lower() in ('true', '1', 'yes'):
    USE_ENVIRON = True
    if 'env' not in locals():
        import environ
        env = environ.Env(
            DEBUG=(bool, False),
            ALLOWED_HOSTS=(list, []),
            CORS_ALLOWED_ORIGINS=(list, []),
        )

# 构建路径
BASE_DIR = Path(__file__).resolve().parent.parent

# 安全配置
if USE_ENVIRON:
    SECRET_KEY = env('DJANGO_SECRET_KEY', default='django-insecure-!juqb7pyd*vam)slo(nr=m5a%qs+#$(0#6wdh###%)uq7wh+(&')
    DEBUG = env('DEBUG', default=True)
    ALLOWED_HOSTS = env('DJANGO_ALLOWED_HOSTS', default=['localhost', '127.0.0.1', '0.0.0.0'])
else:
    SECRET_KEY = 'django-insecure-!juqb7pyd*vam)slo(nr=m5a%qs+#$(0#6wdh###%)uq7wh+(&'
    DEBUG = True
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']


# 应用定义
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'drf_spectacular',
    'django_filters',
    'django_ratelimit',
    'django_celery_beat',
    'django_celery_results',
]

LOCAL_APPS = [
    'apps.common',
    'apps.users',
    'apps.products',
    'apps.activities',
    'apps.orders',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# 中间件配置
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'apps.users.middleware.SecurityHeadersMiddleware',
    'apps.users.middleware.RateLimitMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'apps.users.middleware.JWTAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.users.middleware.UserActivityMiddleware',
]

ROOT_URLCONF = 'backend.urls'

# 模板配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# 数据库配置
# 支持 DATABASE_URL 环境变量（Docker环境）
if USE_ENVIRON and env('DATABASE_URL', default=None):
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(env('DATABASE_URL'))
    }
elif USE_ENVIRON:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('DB_NAME', default='flashsku_db'),
            'USER': env('DB_USER', default='flashsku_user'),
            'PASSWORD': env('DB_PASSWORD', default='flashsku_pass'),
            'HOST': env('DB_HOST', default='localhost'),
            'PORT': env('DB_PORT', default='5432'),
            'OPTIONS': {
                'charset': 'utf8',
            },
            'CONN_MAX_AGE': 60,
        }
    }
else:
    # 开发环境默认使用 SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# 国际化配置
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_TZ = True

# 静态文件配置
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# 媒体文件配置
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# 默认主键字段类型
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Sites框架配置
SITE_ID = 1

# 测试环境标志
TESTING = 'test' in sys.argv

# ===================================
# 缓存配置
# ===================================
if USE_ENVIRON:
    # 生产环境使用Redis缓存
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': env('REDIS_URL', default='redis://redis:6379/0'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
            'KEY_PREFIX': 'flashsku',
            'TIMEOUT': 300,  # 默认5分钟过期
        }
    }
else:
    # 开发环境使用Redis缓存（如果可用）或内存缓存
    try:
        import redis
        # 尝试连接Redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.ping()
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.redis.RedisCache',
                'LOCATION': 'redis://localhost:6379/0',
                'KEY_PREFIX': 'flashsku_dev',
                'TIMEOUT': 300,
            }
        }
    except:
        # Redis不可用时使用内存缓存
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
                'LOCATION': 'unique-snowflake',
            }
        }

# ===================================
# 日志配置
# ===================================
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# ===================================
# Django REST Framework 配置
# ===================================
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # 开发阶段允许所有访问
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ['v1'],
}

# ===================================
# CORS 配置
# ===================================
if USE_ENVIRON:
    CORS_ALLOWED_ORIGINS = env('DJANGO_CORS_ALLOWED_ORIGINS', default=[
        'http://localhost:3000',
        'http://127.0.0.1:3000',
    ])
else:
    CORS_ALLOWED_ORIGINS = [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://localhost:8080',
        'http://127.0.0.1:8080',
    ]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = DEBUG  # 仅在开发环境允许所有源

# ===================================
# API 文档配置
# ===================================
SPECTACULAR_SETTINGS = {
    'TITLE': 'Flash Sku API',
    'DESCRIPTION': '高并发秒杀系统 API 文档',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': True,
    },
}

# ===================================
# 邮件配置
# ===================================
if USE_ENVIRON:
    # 生产环境邮件配置
    EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
    EMAIL_HOST = env('EMAIL_HOST', default='smtp.gmail.com')
    EMAIL_PORT = env('EMAIL_PORT', default=587)
    EMAIL_USE_TLS = env('EMAIL_USE_TLS', default=True)
    EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
    DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='Flash Sku <noreply@flashsku.com>')
    SERVER_EMAIL = env('SERVER_EMAIL', default='Flash Sku <server@flashsku.com>')
else:
    # 开发环境邮件配置
    if DEBUG:
        # 开发环境使用控制台后端，邮件输出到控制台
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    else:
        # 测试环境使用内存后端
        EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'

    # SMTP配置（如果需要真实发送邮件时使用）
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = ''  # 在.env文件中配置
    EMAIL_HOST_PASSWORD = ''  # 在.env文件中配置
    DEFAULT_FROM_EMAIL = 'Flash Sku <noreply@flashsku.com>'
    SERVER_EMAIL = 'Flash Sku <server@flashsku.com>'

# 邮件相关设置
EMAIL_TIMEOUT = 30  # 邮件发送超时时间（秒）
EMAIL_SUBJECT_PREFIX = '[Flash Sku] '  # 邮件主题前缀

# ===================================
# JWT认证配置
# ===================================
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),  # 访问令牌1小时过期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # 刷新令牌7天过期
    'ROTATE_REFRESH_TOKENS': True,  # 刷新时生成新的refresh token
    'BLACKLIST_AFTER_ROTATION': True,  # 旧的refresh token加入黑名单
    'UPDATE_LAST_LOGIN': True,  # 更新最后登录时间

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': 'flash-sku',
    'JSON_ENCODER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(hours=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}

# 更新REST_FRAMEWORK配置以支持JWT
REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'] = [
    'rest_framework_simplejwt.authentication.JWTAuthentication',
    'rest_framework.authentication.SessionAuthentication',
]

# ===================================
# Celery 异步任务配置
# ===================================
if USE_ENVIRON:
    # 生产环境Celery配置
    CELERY_BROKER_URL = env('RABBITMQ_URL', default='amqp://guest:guest@rabbitmq:5672/')
    CELERY_RESULT_BACKEND = env('REDIS_URL', default='redis://redis:6379/1')
else:
    # 开发环境Celery配置
    CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672/'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'

# Celery基础配置
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Celery任务路由配置
CELERY_TASK_ROUTES = {
    'apps.orders.tasks.create_seckill_order': {'queue': 'orders'},
    'apps.orders.tasks.process_seckill_order_from_go': {'queue': 'orders'},
    'apps.orders.tasks.cancel_expired_orders': {'queue': 'orders'},
    'apps.orders.tasks.cancel_order_task': {'queue': 'orders'},
    'apps.orders.tasks.monitor_order_timeouts': {'queue': 'orders'},
    'apps.orders.tasks.check_stock_consistency': {'queue': 'orders'},
    'apps.orders.tasks.rollback_stock': {'queue': 'orders'},
    'apps.users.tasks.send_email_verification': {'queue': 'emails'},
}

# Celery Worker配置
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # 每次只取一个任务
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000  # 每个worker最多处理1000个任务后重启
CELERY_TASK_ACKS_LATE = True  # 任务完成后才确认
CELERY_TASK_REJECT_ON_WORKER_LOST = True  # worker丢失时拒绝任务

# Celery Beat定时任务配置
CELERY_BEAT_SCHEDULE = {
    'cancel-expired-orders': {
        'task': 'apps.orders.tasks.cancel_expired_orders',
        'schedule': 60.0,  # 每60秒执行一次
        'options': {'queue': 'orders'}
    },
    'monitor-order-timeouts': {
        'task': 'apps.orders.tasks.monitor_order_timeouts',
        'schedule': 300.0,  # 每5分钟执行一次
        'options': {'queue': 'orders'}
    },
    'check-stock-consistency': {
        'task': 'apps.orders.tasks.check_stock_consistency',
        'schedule': 1800.0,  # 每30分钟执行一次
        'options': {'queue': 'orders'}
    },
}

# Celery结果后端配置
CELERY_RESULT_EXPIRES = 3600  # 结果保存1小时
CELERY_TASK_RESULT_EXPIRES = 3600
CELERY_RESULT_PERSISTENT = True

# Celery错误处理
CELERY_TASK_SOFT_TIME_LIMIT = 300  # 软超时5分钟
CELERY_TASK_TIME_LIMIT = 600  # 硬超时10分钟
CELERY_TASK_MAX_RETRIES = 3  # 最大重试3次
CELERY_TASK_DEFAULT_RETRY_DELAY = 60  # 重试延迟60秒

# ===================================
# 开发工具配置
# ===================================
if DEBUG:
    # 开发环境特定配置
    pass
