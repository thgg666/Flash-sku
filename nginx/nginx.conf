# Flash Sku - Nginx API Gateway Configuration
# 微服务架构的统一入口配置

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式定义
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 性能优化配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Gzip 压缩配置
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_proxied any;

    # 压缩文件类型
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/csv
        application/javascript
        application/json
        application/xml
        application/xml+rss
        application/atom+xml
        application/rss+xml
        application/xhtml+xml
        application/x-javascript
        application/x-font-ttf
        application/vnd.ms-fontobject
        font/opentype
        image/svg+xml
        image/x-icon;

    # 上游服务定义
    upstream django_backend {
        # 主Django服务
        server django:8000 max_fails=3 fail_timeout=30s;
        # 可以添加多个Django实例实现负载均衡
        # server django2:8000 max_fails=3 fail_timeout=30s backup;

        # 连接池配置
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream gin_seckill {
        # 主Go秒杀服务
        server gin:8080 max_fails=2 fail_timeout=10s;
        # 可以添加多个Go实例实现负载均衡
        # server gin2:8080 max_fails=2 fail_timeout=10s;

        # 连接池配置
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;

        # 负载均衡算法：least_conn 最少连接数
        least_conn;
    }

    upstream vue_frontend {
        # 主前端服务
        server frontend:3000 max_fails=3 fail_timeout=30s;
        # 可以添加多个前端实例
        # server frontend2:3000 max_fails=3 fail_timeout=30s backup;

        # 连接池配置
        keepalive 16;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # 限流配置
    # API接口限流：每秒10个请求
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # 秒杀接口限流：每秒5个请求
    limit_req_zone $binary_remote_addr zone=seckill_limit:10m rate=5r/s;

    # 登录接口限流：每分钟5个请求
    limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/m;

    # 静态资源限流：每秒50个请求
    limit_req_zone $binary_remote_addr zone=static_limit:10m rate=50r/s;

    # 连接数限制
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

    # 主服务器配置
    server {
        listen 80;
        server_name localhost;

        # 连接数限制：每个IP最多20个并发连接
        limit_conn conn_limit 20;

        # 安全头设置
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Permitted-Cross-Domain-Policies none always;
        add_header X-Download-Options noopen always;

        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # CSP (Content Security Policy) - 开发环境相对宽松
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' ws: wss:; frame-ancestors 'none';" always;

        # 权限策略 (Permissions Policy)
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;

        # API版本路由 - v1版本
        location /api/v1/ {
            limit_req zone=api_limit burst=20 nodelay;

            # 重写路径，移除v1前缀
            rewrite ^/api/v1/(.*)$ /api/$1 break;

            proxy_pass http://django_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-API-Version "v1";

            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # 秒杀API版本路由
        location /seckill/v1/ {
            limit_req zone=seckill_limit burst=10 nodelay;

            # 重写路径，移除v1前缀
            rewrite ^/seckill/v1/(.*)$ /seckill/$1 break;

            proxy_pass http://gin_seckill;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-API-Version "v1";

            # 超时设置
            proxy_connect_timeout 1s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
        }

        # 前端静态资源
        location / {
            # 尝试直接提供文件，如果不存在则代理到前端服务
            try_files $uri $uri/ @frontend;
        }

        # 前端服务代理
        location @frontend {
            proxy_pass http://vue_frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket 支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # 缓存控制
            proxy_cache_bypass $http_upgrade;
        }

        # Django API 路由
        location /api/ {
            # CORS预检请求处理
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }

            # CORS响应头
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,X-Total-Count' always;

            limit_req zone=api_limit burst=20 nodelay;

            proxy_pass http://django_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;

            # HTTP/1.1 支持
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # 缓存控制
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;
        }

        # 登录接口特殊限流
        location /api/auth/login/ {
            limit_req zone=login_limit burst=3 nodelay;

            proxy_pass http://django_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 更短的超时时间
            proxy_connect_timeout 3s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # 文件上传接口
        location /api/upload/ {
            limit_req zone=api_limit burst=5 nodelay;

            # 增加上传文件大小限制
            client_max_body_size 50M;

            proxy_pass http://django_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 上传超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;  # 5分钟上传超时
            proxy_read_timeout 300s;

            # 禁用缓存
            proxy_request_buffering off;
        }

        # WebSocket连接
        location /ws/ {
            proxy_pass http://django_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket超时设置
            proxy_connect_timeout 7s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # Django Admin 路由
        location /admin/ {
            proxy_pass http://django_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Django 静态文件
        location /static/ {
            limit_req zone=static_limit burst=100 nodelay;

            proxy_pass http://django_backend;

            # 长期缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";

            # 压缩
            gzip_static on;

            # 超时设置
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Django 媒体文件
        location /media/ {
            limit_req zone=static_limit burst=50 nodelay;

            proxy_pass http://django_backend;

            # 中期缓存
            expires 30d;
            add_header Cache-Control "public";
            add_header Vary "Accept-Encoding";

            # 超时设置
            proxy_connect_timeout 2s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Go Gin 秒杀服务路由
        location /seckill/ {
            # CORS预检请求处理
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header 'Access-Control-Max-Age' 1728000 always;
                add_header 'Content-Type' 'text/plain; charset=utf-8' always;
                add_header 'Content-Length' 0 always;
                return 204;
            }

            # CORS响应头
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,X-Request-ID' always;

            # 严格的限流：每秒5个请求，突发10个
            limit_req zone=seckill_limit burst=10 nodelay;

            proxy_pass http://gin_seckill/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            # 秒杀服务超时设置 (更短的超时时间)
            proxy_connect_timeout 1s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;

            # HTTP/1.1 支持
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # 禁用缓存
            proxy_cache off;
            proxy_no_cache 1;
            proxy_cache_bypass 1;

            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 2s;
        }

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Nginx状态监控
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker网络
            deny all;
        }

        # 上游服务健康检查
        location /health/django {
            access_log off;
            proxy_pass http://django_backend/health/;
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
        }

        location /health/gin {
            access_log off;
            proxy_pass http://gin_seckill/health;
            proxy_connect_timeout 1s;
            proxy_send_timeout 1s;
            proxy_read_timeout 1s;
        }

        location /health/frontend {
            access_log off;
            proxy_pass http://vue_frontend/health;
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
        }

        # API路由重定向 - 移除尾部斜杠
        location ~ ^/api/(.+)/$ {
            return 301 /api/$1;
        }

        # 秒杀路由重定向 - 移除尾部斜杠
        location ~ ^/seckill/(.+)/$ {
            return 301 /seckill/$1;
        }

        # 旧版API重定向
        location /v1/ {
            return 301 /api/v1/;
        }

        # 机器人文件
        location = /robots.txt {
            access_log off;
            log_not_found off;
            return 200 "User-agent: *\nDisallow: /api/\nDisallow: /admin/\nDisallow: /seckill/\n";
            add_header Content-Type text/plain;
        }

        # 前端静态资源 - JS/CSS文件
        location ~* \.(js|css)$ {
            limit_req zone=static_limit burst=100 nodelay;

            # 尝试本地文件，否则代理到前端服务
            try_files $uri @frontend;

            # 长期缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";

            # 压缩
            gzip_static on;

            access_log off;
        }

        # 前端静态资源 - 图片文件
        location ~* \.(png|jpg|jpeg|gif|ico|svg|webp|avif)$ {
            limit_req zone=static_limit burst=200 nodelay;

            # 尝试本地文件，否则代理到前端服务
            try_files $uri @frontend;

            # 长期缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";

            access_log off;
        }

        # 前端静态资源 - 字体文件
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            limit_req zone=static_limit burst=50 nodelay;

            # 尝试本地文件，否则代理到前端服务
            try_files $uri @frontend;

            # 长期缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";

            access_log off;
        }

        # 前端静态资源 - 其他资源文件
        location ~* \.(json|xml|txt|pdf|doc|docx|zip|rar)$ {
            limit_req zone=static_limit burst=20 nodelay;

            # 尝试本地文件，否则代理到前端服务
            try_files $uri @frontend;

            # 中期缓存
            expires 7d;
            add_header Cache-Control "public";
            add_header Vary "Accept-Encoding";

            access_log off;
        }

        # Favicon
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri @frontend;
        }

        # Manifest文件
        location = /manifest.json {
            access_log off;
            expires 1d;
            add_header Cache-Control "public";
            try_files $uri @frontend;
        }

        # Service Worker
        location = /sw.js {
            access_log off;
            expires 0;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            try_files $uri @frontend;
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /404.html {
            internal;
            proxy_pass http://vue_frontend/404.html;
        }

        location = /50x.html {
            internal;
            root /usr/share/nginx/html;
        }
    }
}
